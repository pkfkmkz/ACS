/*******************************************************************************
 * ALMA - Atacama Large Millimeter Array
 * Copyright (c) ESO - European Southern Observatory, 2011
 * (in the framework of the ALMA collaboration).
 * All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *******************************************************************************/
/*
 * generated by Xtext
 */
package alma.acs.tmcdb.grammardef;

import org.eclipse.emf.common.util.EList;

import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider;

import alma.acs.tmcdb.grammardef.tmcdbTables.Key;
import alma.acs.tmcdb.grammardef.tmcdbTables.Note;
import alma.acs.tmcdb.grammardef.tmcdbTables.Type;
import alma.acs.tmcdb.grammardef.tmcdbTables.Table;
import alma.acs.tmcdb.grammardef.tmcdbTables.Header;
import alma.acs.tmcdb.grammardef.tmcdbTables.Column;
import alma.acs.tmcdb.grammardef.tmcdbTables.Include;
import alma.acs.tmcdb.grammardef.tmcdbTables.EnumDef;
import alma.acs.tmcdb.grammardef.tmcdbTables.ModelName;
import alma.acs.tmcdb.grammardef.tmcdbTables.Constraint;
import alma.acs.tmcdb.grammardef.tmcdbTables.TMCDBModel;
import alma.acs.tmcdb.grammardef.tmcdbTables.NullitySpecifier;


/**
 * Use this class to register components to be used within the IDE.
 */
public class TmcdbTablesRuntimeModule extends alma.acs.tmcdb.grammardef.AbstractTmcdbTablesRuntimeModule {
    public static class TmcdbTableNameProvider extends DefaultDeclarativeQualifiedNameProvider{
        protected QualifiedName qualifiedName(Object o) {
            if (o instanceof TMCDBModel) return QualifiedName.create(((TMCDBModel)o).getModelName().getName());
            if (o instanceof ModelName) return QualifiedName.create(((ModelName)o).getName());
            if (o instanceof Header) return QualifiedName.create(((Header)o).getName());
            if (o instanceof Include) return QualifiedName.create(((Include)o).getImportURI());
            if (o instanceof Note) return QualifiedName.create(((Note)o).getNote());
            if (o instanceof Table) return QualifiedName.create(((Table)o).getName());
            if (o instanceof Column) return QualifiedName.create(((Column)o).getName());
            if (o instanceof Key) {
                Table t = (Table) ((Key) o).eContainer();
                EList<Column> cols = ((Key) o).getColumns();
                String key = "";
                for (Column col: cols) key += col.getName() + "-";
                if (key.length() > 0) key = key.substring(0, key.length() - 1);
                return QualifiedName.create(t.getName(), key);
            }
            if (o instanceof EnumDef) return QualifiedName.create(((EnumDef)o).getName());
            if (o instanceof Constraint) return QualifiedName.create(((Constraint)o).getName());
            if (o instanceof Type) return QualifiedName.create(((Type)o).getName());
            if (o instanceof NullitySpecifier) return QualifiedName.create("NULL");
            return super.qualifiedName(o);
        }
    }
    @Override
    public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
        return TmcdbTableNameProvider.class;
    }
}
