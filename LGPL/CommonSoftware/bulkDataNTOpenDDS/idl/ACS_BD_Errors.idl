#ifndef  _ACS_BD_Errors_IDL_
#define  _ACS_BD_Errors_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.9 2007/05/23 08:55:56 nbarriga Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include <acserr.idl>

#pragma prefix "alma"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType ACS_BD_Errors = 57;
}; // module ACSErr

module ACS_BD_Errors
{
	 const ACSErr::ErrorCode StreamCreateProblem = 0;
	 const ACSErr::ErrorCode StreamAlreadyExists = 1;
	 const ACSErr::ErrorCode StreamNotExist = 2;
	 const ACSErr::ErrorCode FlowCreateProblem = 3;
	 const ACSErr::ErrorCode FlowAlreadyExists = 4;
	 const ACSErr::ErrorCode FlowNotExist = 5;
	 const ACSErr::ErrorCode StreamDestroyProblem = 6;
	 const ACSErr::ErrorCode FlowDestroyProblem = 7;
	 const ACSErr::ErrorCode CDBProblem = 8;
	 const ACSErr::ErrorCode UnknownDataType = 9;
	 const ACSErr::ErrorCode WrongFrameOrder = 10;
	 const ACSErr::ErrorCode FrameLost = 11;
	 const ACSErr::ErrorCode SampleLost = 12;
	 const ACSErr::ErrorCode UserCallbackError = 13;
	 const ACSErr::ErrorCode SendDataError = 14;
	 const ACSErr::ErrorCode StopSendError = 15;
	 const ACSErr::ErrorCode ResetSendError = 16;
	 const ACSErr::ErrorCode StartSendError = 17;
	 const ACSErr::ErrorCode SendFrameGenericError = 18;
	 const ACSErr::ErrorCode SendFrameTimeout = 19;
	 const ACSErr::ErrorCode FrameAckTimeout = 20;
	 const ACSErr::ErrorCode FrameTooLong = 21;
	 const ACSErr::ErrorCode CBReceiveProcessTimeout = 22;
	 const ACSErr::ErrorCode CBReceiveAvgProcessTimeout = 23;
	 const ACSErr::ErrorCode SenderWrongCmdOrder = 24;
	
	// excption for type:
	exception ACS_BD_ErrorsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	// excptions for codes:
	exception StreamCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception StreamAlreadyExistsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception StreamNotExistEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FlowCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FlowAlreadyExistsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FlowNotExistEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception StreamDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FlowDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CDBProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception UnknownDataTypeEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception WrongFrameOrderEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FrameLostEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SampleLostEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception UserCallbackErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SendDataErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception StopSendErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception ResetSendErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception StartSendErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SendFrameGenericErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SendFrameTimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FrameAckTimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FrameTooLongEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CBReceiveProcessTimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CBReceiveAvgProcessTimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SenderWrongCmdOrderEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	
}; // module ACS_BD_Errors

#endif

