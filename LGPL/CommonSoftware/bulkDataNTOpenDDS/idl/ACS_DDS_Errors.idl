#ifndef  _ACS_DDS_Errors_IDL_
#define  _ACS_DDS_Errors_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.9 2007/05/23 08:55:56 nbarriga Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include <acserr.idl>

#pragma prefix "alma"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType ACS_DDS_Errors = 56;
}; // module ACSErr

module ACS_DDS_Errors
{
	 const ACSErr::ErrorCode DDSQoSSetProblem = 0;
	 const ACSErr::ErrorCode DDSQoSGetProblem = 1;
	 const ACSErr::ErrorCode DDSTopicCreateProblem = 2;
	 const ACSErr::ErrorCode DDSTopicEnableProblem = 3;
	 const ACSErr::ErrorCode DDSTopicDeleteProblem = 4;
	 const ACSErr::ErrorCode DDSPublisherCreateProblem = 5;
	 const ACSErr::ErrorCode DDSPublisherEnableProblem = 6;
	 const ACSErr::ErrorCode DDSPublisherDestroyProblem = 7;
	 const ACSErr::ErrorCode DDSDWCreateProblem = 8;
	 const ACSErr::ErrorCode DDSDWEnableProblem = 9;
	 const ACSErr::ErrorCode DDSRegisterTypeProblem = 10;
	 const ACSErr::ErrorCode DDSUnregisterTypeProblem = 11;
	 const ACSErr::ErrorCode DDSSubscriberCreateProblem = 12;
	 const ACSErr::ErrorCode DDSSubscriberDestroyProblem = 13;
	 const ACSErr::ErrorCode DDSSubscriberEnableProblem = 14;
	 const ACSErr::ErrorCode DDSDRCreateProblem = 15;
	 const ACSErr::ErrorCode DDSDRDestroyProblem = 16;
	 const ACSErr::ErrorCode DDSDREnableProblem = 17;
	 const ACSErr::ErrorCode DDSParticipantDeleteContainedEntitiesProblem = 18;
	 const ACSErr::ErrorCode DDSParticipantCreateProblem = 19;
	 const ACSErr::ErrorCode DDSParticipantDestroyProblem = 20;
	 const ACSErr::ErrorCode DDSParticipantEnableProblem = 21;
	 const ACSErr::ErrorCode DDSCreateDataProblem = 22;
	 const ACSErr::ErrorCode DDSDeleteDataProblem = 23;
	 const ACSErr::ErrorCode DDSReturnError = 24;
	 const ACSErr::ErrorCode DDSNarrowFailed = 25;
	 const ACSErr::ErrorCode DDSRequestedIncompatibleQoS = 26;
	 const ACSErr::ErrorCode DDSOfferedIncompatibleQoS = 27;
	 const ACSErr::ErrorCode DDSRequestedDeadlineMissed = 28;
	 const ACSErr::ErrorCode DDSOffeeredDeadlineMissed = 29;
	 const ACSErr::ErrorCode DDSSampleStateError = 30;
	 const ACSErr::ErrorCode DDSLivelinesLost = 31;
	 const ACSErr::ErrorCode DDSDestinationUnreachable = 32;
	
	// excption for type:
	exception ACS_DDS_ErrorsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	// excptions for codes:
	exception DDSQoSSetProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSQoSGetProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSTopicCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSTopicEnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSTopicDeleteProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSPublisherCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSPublisherEnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSPublisherDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDWCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDWEnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSRegisterTypeProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSUnregisterTypeProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSSubscriberCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSSubscriberDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSSubscriberEnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDRCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDRDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDREnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSParticipantDeleteContainedEntitiesProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSParticipantCreateProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSParticipantDestroyProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSParticipantEnableProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSCreateDataProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDeleteDataProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSReturnErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSNarrowFailedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSRequestedIncompatibleQoSEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSOfferedIncompatibleQoSEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSRequestedDeadlineMissedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSOffeeredDeadlineMissedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSSampleStateErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSLivelinesLostEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DDSDestinationUnreachableEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	
}; // module ACS_DDS_Errors

#endif

