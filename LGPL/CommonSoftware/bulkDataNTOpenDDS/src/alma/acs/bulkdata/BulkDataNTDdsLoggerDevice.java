/*
* ALMA - Atacama Large Millimiter Array
* Copyright (c) National Astronomical Observatory of Japan, 2017 
* 
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
* 
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/
package alma.acs.bulkdata;

import alma.acs.logging.AcsLogLevel;

import java.util.logging.Logger;

import com.rti.ndds.config.LogLevel;
import com.rti.ndds.config.LogMessage;
import com.rti.ndds.config.LoggerDevice;

/**
 * This logger device redirects the log messages generated by the underlying
 * RTI DDS library to {@link java.util.logging.Logger}.
 */
class BulkDataNTDdsLoggerDevice implements LoggerDevice {
    private final Logger logger;

    /**
     * This constructor creates LoggerDevice that redirects the log messages
     * generated by the underlying RTI DDS library to the given instance of
     * {@link java.util.logging.Logger}.
     *
     * @param logger The logger to which DDS library will provide the log
     *               messages. Specify null not to log the messaged generated
     *               by the RTI DDS library.
     */
    public BulkDataNTDdsLoggerDevice(Logger logger) {
        this.logger = logger;
    }

    @Override
    public void write(LogMessage message) {
        if (logger == null) {
            return;
        }

        if (message == null) {
            return;
        }

        if (message.level == LogLevel.NDDS_CONFIG_LOG_LEVEL_ERROR) {
            logger.log(AcsLogLevel.ERROR, message.text.trim());
        } else if (message.level == LogLevel.NDDS_CONFIG_LOG_LEVEL_WARNING) {
            logger.log(AcsLogLevel.WARNING, message.text.trim());
        } else if (message.level == LogLevel.NDDS_CONFIG_LOG_LEVEL_STATUS_LOCAL) {
            logger.log(AcsLogLevel.INFO, message.text.trim());
        } else if (message.level == LogLevel.NDDS_CONFIG_LOG_LEVEL_STATUS_REMOTE) {
            logger.log(AcsLogLevel.INFO, message.text.trim());
        } else if (message.level == LogLevel.NDDS_CONFIG_LOG_LEVEL_DEBUG) {
            logger.log(AcsLogLevel.DEBUG, message.text.trim());
        } else {
            // This log level is not expected.

            String logLevelStr;
            if (message.level == null) {
                logLevelStr = "null";
            } else {
                logLevelStr = String.format("%s(%d)", 
                                            message.level.name(),
                                            message.level.ordinal());
            }

            String newMessage
                = String.format("Log level of the message \"%s\" is %s, " +
                                "which is not known by BulkData Java library.",
                                message.text.trim(), logLevelStr);
            logger.log(AcsLogLevel.WARNING, newMessage);
        }
    }

    @Override
    public void close() {
    }
}
