/*
* ALMA - Atacama Large Millimiter Array
* Copyright (c) National Astronomical Observatory of Japan, 2017 
* 
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
* 
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/
/**
 * This package provides Java API of BDNT (Bulk Data New Technology).
 *
 * <h2>Overview</h2>
 *
 * Bulk Data is a service in the ACS (ALMA Common Software) to transfer high
 * volumes of data from many-to-one, one-to-many or many-to-many clients.
 * Bulk Data is based on the following concepts:
 *
 * <ul>
 * <li><b>Sender</b>: An entity that sends data out.</li>
 * <li><b>Receiver</b>: An entity that receives data.</li>
 * <li><b>Flow</b>: Data are transferred from the Sender(s) to the Receiver(s)
 *                  on a Flow.</li>
 * <li><b>Stream</b>: A conceptual group that contains one or more Flows.</li>
 * </ul>
 *
 * We refer to each Stream and each Flow with a name. A specific data transfer
 * path is identified uniquely by the combination of Stream and Flow names.
 *
 * <p>
 * Bulk Data is now implemented based on DDS (Data Distributed Service)
 * technology and this Java API is implemented on top of DDS Java API
 * provided by RTI, but this fact is hidden from the application programmers
 * who use this API. The application programmers can send data to Receiver,
 * or receive data from Sender using this API without the knowledge of DDS.
 *
 * <h2>Restriction</h2>
 *
 * As of writing this document, only Sender has been implemented. Receiver
 * is not currently provided by this Java API.
 *
 * <h2>Prerequisite</h2>
 *
 * <ul>
 * <li>Java SE 8
 *   <ul>
 *   <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java API</a>
 *   </ul>
 * <li><a href="https://community.rti.com/documentation/rti-connext-510">
 *     RTI Connext 5.1.0</a>
 *   <ul>
 *   <li><a href="https://community.rti.com/rti-doc/510/ndds.5.1.0/doc/html/api_java/">
 *       Java API</a>
 *   </ul>
 * <li><a href="https://commons.apache.org/proper/commons-lang/">Apache Commons Lang</a> 2.5 (commons-lang-2.5.jar)
 *   <ul>
 *   <li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-2.5/">
 *       Java API</a>
 *   </ul>
 * <li><a href="https://commons.apache.org/proper/commons-io/">Apache Commons IO</a> 2.0 (commons-io-2.0.jar)
 *   <ul>
 *   <li><a href="https://commons.apache.org/proper/commons-io/javadocs/api-2.0/index.html">
 *       Java API</a>
 *   </ul>
 * <li><a href="https://commons.apache.org/proper/commons-cli/">Apache Commons CLI</a> 1.2 (commons-cli-1.2)
 *   <ul>
 *   <li><a href="https://commons.apache.org/proper/commons-cli/javadocs/api-1.2/index.html">
 *       Java API</a>
 *   <li>This library provides the utility classes and methods for command line
 *       parsing. This library is used only for the command line parsing of
 *       BulkDataNTGenSender. For the applications that just call the APIs
 *       this library is not mandatory, but currently that command line tool
 *       is included in one jar file (jBulkData.jar). If you do not want the
 *       dependency on this library, please ask a developer of this Java API.
 *   </ul>
 * <li>ACS Logging System for Java (acsjlog.jar)
 *   <ul>
 *   <li><a href="http://webdav.sco.alma.cl/public/ReleaseNotes/ACS-FEB2016/APIs/javadoc/index.html">ACS Java API</a>
 *   <li>Only tested with the one included in ACS-FEB2017 version.
 *   <li>BulkData Java API uses the standard logging system that comes with
 *       Java SE 8 (java.util.logging), but it uses the log levels defined
 *       by ACS. If ACS is not desirable, it is easy to remove the dependency
 *       on it by replacing the log levels to the one provided by java.util.logging
 *       or something else.
 *   </ul>
 * </li>
 * </ul>
 *
 * <h2>Example usage of Sender</h2>
 *
 * The following code snippet shows an example which sends data to "f1"
 * Flow in "s1" Stream.
 *
 * <pre>
 * <code>
import alma.acs.bulkdata;
import alma.acs.logging.ClientLogManager;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import java.util.logging.Logger;

        // Set the destination of the log messages that are not bound 
        // to specific Stream or Flow. The log messages generated by
        // the underlying RTI DDS library will be also logged by the
        // specified logger. This is not mandatory, but is useful
        // when you encounter an error and debug the problem.
        //
        // This example specifies the logger that is provided by ACS.
        Logger logger
           = ClientLogManager.getAcsLogManager()
             .getLoggerForApplication("BulkDataNTSampleSender", true);
        globalConf.setLogger(logger);

        // Set the verbosity of the underlying RTI DDS library.
        // To keep your application compatibility with the one that uses
        // C++ API, set the verbosity as shown below.
        try {
            globalConf.setDdsLogVerbosityFromEnvVar();
        } catch (InvalidEnvironmentalVariableException ex) {
            // Use WARNING level if BULKDATA_NT_DEBUG is not defined or
            // contains an invalid value.
            globalConf.setDdsLogVerbosity(BulkDataNTDdsLogVerbosity.WARNING);
        }

        // Load QoS XML file from ACS environment. This is mandatory.
        // If you forget to call this method, QosXmlNotLoadedException
        // will be thrown when creating a new Stream.
        //
        // If you want to load another QoS XML file in your local instead
        // of the one prepared by ACS, call loadQosXml(Path) instead.
        globalConf.loadQosXml();
       
        // Create a new Stream.
        BulkDataNTSenderStreamConfiguration streamConf
            = new BulkDataNTSenderStreamConfigurationDefault();
        BulkDataNTSenderStream stream
            = new BulkDataNTSenderStream("s1", streamConf);
       
        // Create a new Flow.
        //
        // The second argument of createFlow() is the listener for the events
        // raised by the Flow. If you do not need it, specify an empty value.
        BulkDataNTSenderFlowConfiguration flowConf
            = new BulkDataNTSenderFlowConfigurationDefault();
        BulkDataNTSenderFlow flow
            = stream.createFlow("f1", Optional.empty(), flowConf);
       
        // Tell the receiver that you are going to send data.
        flow.startSend("DefaultParameter".getBytes(StandardCharsets.US_ASCII));
       
        // Send arbitrary length of serialized data. You can call sendData()
        // repeatedly instead of calling once.
        byte[] data = new byte[10];
        flow.sendData(data);
       
        // Tell the receiver that you finished sending data.
        flow.stopSend();
       
        // If you want, you can call startSend() again and repeat the same
        // procedure to send another data.
       
        // Delete Flow "f1" from Stream "s1". You do not need to do this
        // because stream.destroy() that is called later automatically deletes
        // all Flows in the Stream.
        stream.deleteFlow(flow);
       
        // You need to make sure that destroy() is called only once before
        // your application finishes. Otherwise, the application may hang
        // up and not keep living until you forcibly kill it.
        stream.destroy();
 * </code>
 * </pre>
 *
 * <p>
 * In the above example, the Stream and the Flow use the default
 * configurations. You can change the configurations by providing an
 * object that implements
 * {@link alma.acs.bulkdata.BulkDataNTSenderStreamConfiguration}
 * for the Stream or
 * {@link alma.acs.bulkdata.BulkDataNTSenderFlowConfiguration} for the
 * Flow. The easiest way would be to inherit
 * {@link alma.acs.bulkdata.BulkDataNTSenderStreamConfigurationDefault} or
 * {@link alma.acs.bulkdata.BulkDataNTSenderFlowConfigurationDefault}
 * and just override the getter methods of the configuration points for which
 * you want to use your settings. The code snippet below shows an example
 * on how to specify a QoS library name instead of using the default library
 * name.
 *
 * <pre>
 * <code>
 *  BulkDataNTSenderStreamConfiguration streamConf
 *      = new BulkDataNTSenderStreamConfigurationDefault() { 
 *              {@literal @}Override public String
 *                  getQosLibraryName() { return "TCPBulkDataQoSLibrary"; }
 *          };
 * </code>
 * </pre>
 * 
 * <p>
 * For your convenience, the class diagram of the configuration interfaces and
 * the classes that provide the default configuration is shown below:
 * 
 * <img alt="Class diagram of the configuration interfaces and the default \
 *          configuration classes"
 *      src="doc-files/configuration_class_diagram.png"
 *      width="100%" height="100%">
 *
 * <h2>QoS XML file</h2>
 *
 * The underlying DDS library has a concept of QoS (Quality of Service)
 * for tuning the various parameters of the communication between Sender(s)
 * and Receiver(s). In this library, "QoS" means a set of those parameters.
 * For successful communication, compatible QoS settings must be used by
 * both Sender side and Receiver side.
 *
 * <p>
 * QoS settings can be loaded from a QoS XML file that includes all the
 * parameters required to perform BulkData communication. The details of QoS
 * XML file loading are hidden from the application programmers. The application
 * running in ACS environment just needs to call
 * {@link alma.acs.bulkdata.BulkDataNTGlobalConfiguration#loadQosXml()}
 * before creating any Stream, which searches a QoS XML file in ACS environment
 * and load it. The details of how QoS XML files are searched are described in 
 * {@link alma.acs.bulkdata.BulkDataNTGlobalConfiguration#findQosXmlInAcsEnv()}.
 * 
 * <p>
 * If you want to load your own QoS XML file, not the one provided by ACS
 * you can call
 * {@link alma.acs.bulkdata.BulkDataNTGlobalConfiguration#loadQosXml(java.nio.file.Path)}
 * instead. It allows you to load any XML file in the local file system.
 * For more details about how to write the XML, see "Chapter 17 Configuring
 * QoS with XML" in
 * <a href="https://community.rti.com/rti-doc/510/ndds.5.1.0/doc/pdf/RTI_CoreLibrariesAndUtilities_UsersManual.pdf">
 * RTI Connext DDs Core Libraries and Utilities User's Manual
 * </a>.
 *
 * <p>
 * When you create a new Stream or Flow after a QoS XML file is loaded, you have
 * to specify a pair of a library name and a profile name. It can be done by
 * implementing
 * {@link alma.acs.bulkdata.BulkDataNTDdsConfiguration#getQosLibraryName()}
 * or/and
 * {@link alma.acs.bulkdata.BulkDataNTDdsConfiguration#getQosProfileName()}.
 * 
 * <p>
 * A library is a group which contains several profiles. The available library
 * names can be found in the QoS XML file as {@literal <qos_lib name="...">}.
 * {@link alma.acs.bulkdata.BulkDataNTDdsConfigurationDefault#getQosLibraryName()}
 * returns the default library name for ACS:
 * {@value alma.acs.bulkdata.BulkDataNTDdsConfigurationDefault#DEFAULT_QOS_LIBRARY_NAME}.
 * 
 * <p>
 * A profile is a group which contains actual QoS settings. The libraries in
 * ACS environment provide 4 profiles per library. One for Sender Streams, one
 * for Receiver Streams, one for Sender Flows and the other for Receiver Flows.
 * {@link alma.acs.bulkdata.BulkDataNTSenderStreamConfigurationDefault#getQosProfileName()}
 * returns the default profile name for Sender Streams:
 * {@value alma.acs.bulkdata.BulkDataNTSenderStreamConfigurationDefault#DEFAULT_QOS_PROFILE_NAME}
 * , and
 * {@link alma.acs.bulkdata.BulkDataNTSenderFlowConfigurationDefault#getQosProfileName()}
 * returns the default profile name for Sender Flows:
 * {@value alma.acs.bulkdata.BulkDataNTSenderFlowConfigurationDefault#DEFAULT_QOS_PROFILE_NAME}.
 */
package alma.acs.bulkdata;
