#! /bin/bash
#*******************************************************************************
# E.S.O. - ALMA project
#
# "@(#) $Id: buildBoost,v 1.1 2011/09/07 20:57:52 javarias Exp $"
#
# who       when        what
# --------  ----------  ----------------------------------------------
# jschwarz    02/10/2009

# Load functions
. standardUtilities
#
# Fetch operating system and release version
#
os_discovery

LOG=buildBoost.log
exec > $LOG 2>&1

date

BOOST_VERSION=1_66_0
BOOST_VER=$(echo $BOOST_VERSION|sed 's/_/./g')

CURR_DIR=`pwd`

echo "Installing Boost for $OSTAG"
echo 

#
# Check if a proper version of Swig is available in the O.S.
#
HAVE_BOOST=$(echo "#include <boost/version.hpp>" |g++ -E - 2> /dev/null |grep boost)
if [ "$HAVE_BOOST" != "" ]; then
  echo '
#include <iostream>
#include <boost/version.hpp>

int main() {
    std::cout << BOOST_VERSION / 100000 << "." << BOOST_VERSION / 100 % 1000 << "." << BOOST_VERSION % 100 << std::endl;
    return 0;
}
' |g++ -o /tmp/$$.bin -x c++ -
  BOOST_OS=$(/tmp/$$.bin)
  rm -f /tmp/$$.bin
  BOOST_MIN=$(echo "$BOOST_VER $BOOST_OS" |xargs -n1 |sort -V |head -n1)
fi

if [[ "$BOOST_MIN" == "$BOOST_VER" && ! -e "$ALMASW_INSTDIR/boost" ]]; then
    echo "Skipping Boost build because boost $BOOST_OS is available in the operating system."
    echo ""
    cd $CURR_DIR
    echo Boost installation done
    date
    exit 0
fi

INSTDIR=$ALMASW_ROOTDIR/$ALMASW_RELEASE/boost
if [ -d $INSTDIR ]
then
  echo $INSTDIR directory exists already. I clean it up.
  rm -rf $INSTDIR
fi
mkdir $INSTDIR


#
# Unpack the tar file
# put the sources under $ALMASW_ROOTDIR/$ALMASW_RELEASE/Eclipse
#
NUM_CPU=$(grep -c processor /proc/cpuinfo)
echo "unpacking the archives for Boost "$BOOST_VERSION
SRCFILE=$CURR_DIR/../PRODUCTS/boost_$BOOST_VERSION.tar.bz2
#wget --no-check-certificate -r -c -O $SRCFILE "http://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.bz2?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.60.0%2Fboost_1_60_0.tar.bz2%2Fdownload&ts=1479130893&use_mirror=kent"
cd $CURR_DIR/../PRODUCTS
tar jxf $SRCFILE
patch -p0 < boost_$BOOST_VERSION.patch
cd boost_$BOOST_VERSION
./bootstrap.sh --without-libraries=python 
echo "Compiling boost with the following options: ./b2 -d+2 -q  --without-container --without-python -j$NUM_CPU"
# c++11  compat flag to be changed by c++11 when RHEL 6 support is dropped
./b2 cxxflags="-std=c++0x" linkflags="-std=c++0x" -d+2 -q --without-container --without-python -j$NUM_CPU
./b2 -d+2 -q --prefix=$INSTDIR --without-container --without-python -j$NUM_CPU install
echo "done"
echo ""


cd $CURR_DIR
echo Boost installation done
date

