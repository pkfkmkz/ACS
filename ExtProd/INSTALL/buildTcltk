#! /bin/bash
#*******************************************************************************
# E.S.O. - VLT project
#
# "@(#) $Id: buildTcltk,v 1.23 2012/04/17 11:55:54 eallaert Exp $"
#
# who       when        what
# --------  ----------  ----------------------------------------------
# eallaert  2007-09-03  first version for ACS 7.0, derived from VLTSW
# eallaert  2008-08-28  modified for ACS 8.0 (product updates)
# eallaert  2011-06-03  modified for ACS 10.0 (compilation fix in snack)
# eallaert  2012-11-14  modified to make Tcl/Tk version independent
#
#************************************************************************
#   NAME
#   buildTcltk
#
#   SYNOPSIS
#   buildTcltk [-m] [-d]
# 
#   DESCRIPTION
#   Compiles and install the Tcl/Tk packages needed for ALMA Common Software 
#
#    - tcl/tk
#    - [incr Tcl]
#    - iwidgets
#    - tclX
#    - tcllib
#    - tklib
#    - BLT
#    - tkimg
#    - Tktable
#    - snack
#    - tkman
#    - rman
#    - expect
#    - tclCheck 1.1.13
#    - tkcon (2.5 is latest)
#    - msqltcl 1.99 (if option -m is specified)
#
#   Target installation directory is specified by the enviroment
#   variable $TCLTK_ROOT (usually $ALMASW_INSTDIR/tcltk).  If undefined,
#   /usr/local is used instead.
#
#   Option -d[ebug] allows to run the shell in verbose mode, while option 
#   -m[sql] includes the generation of the msql C-lib, the msqltcl Tcl-extension
#   and the generation of msql directories/files under $ACSDATA.
#
#   FILES
#   input files: are taken from ../PRODUCTS/tcltk.
#   
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#   Tkman assumes that groff is already installed. If tkman does
#   not start, modify "man(print)" in $HOME/.tkman.
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#   Does not stop in case of compilation errors.
#------------------------------------------------------------------------
#
#
# Remark that the Tcl/Tk source directory should be a sibbling of
# the directory containing this file, whereby this subdir name is
# derived from this file's name (i.e. it is the part coming after
# the dash).
#
# The following variable may need to be edited here in order to have
# proper installation:
#    - PREFIX : dirpath where the lib/ bin/ man/ files must be installed
#               (this directory and necessary subdirs will be created if
#               they do not yet exist).
#    - TCL_MEM_DEBUG: set to CFGLAGS=-DTCL_MEM_DEBUG if the Tcl memory 
#               command is needed
# EAL 20040719
#
#************ PLEASE EDIT ^^^^^^^^ ACCORDING TO YOUR NEEDS *************

###############################################################################
# Function definitions used later in this script.
###############################################################################
# definition of a function to print the usage statement for this script
printUsageAndExit ()
{
    echo ""
    echo "Usage: $0 [-d] [-h] [-m]";
    echo "Options: "
    echo "   -d | --debug: echo all commands as they are executed to stdout."
    echo "   -h | --help: print this usage message and exit."
    echo "   -m | --msql: include the msql stuff (typically in for an environment"
    echo "          where VxWorks hosts are managed via vcc/acc"
    echo ""
    exit $1;
}

###############################################################################
# Script logic starts here...    
###############################################################################
MY_NAME=`basename $0`

#
# These will contain the command line arguments and/or options
#
HELP=
DEBUG=
MSQL=

#
# These options can be recognized (longopts comma-separated. Colon means 1 argument is required)
#
LONGOPTS=help,debug,msql
SHORTOPTS=h,d,m
#
# Run getopt (posixly_correct needed). We run twice:
# First run is simply to check the commandline for correctness.
# Second run is does the real work and sets execution flags for this script,
# as appropriate.
export POSIXLY_CORRECT=1

getopt -n $MY_NAME -a -l $LONGOPTS $SHORTOPTS "$@" > /dev/null
if [ $? -ne 0 ] 
    then 
    printUsageAndExit 1;
fi

set -- `getopt -u -a -l $LONGOPTS $SHORTOPTS "$@"`

# Some programs behave differently if POSIXLY_CORRECT is set. In particular
# the configure/build of TclX and Itcl may fail ...
unset POSIXLY_CORRECT

#
# Iterate over getopt's output and set variables accordingly
#
while :
  do
  case "$1" in
      -h|--help)       HELP=true ;;
      -d|--debug)      DEBUG=true ;;
      -m|--msql)       MSQL=true;;
      --) break ;;
  esac
  shift
done
shift

if [ "$HELP" ] ; 
then
    printUsageAndExit 0
fi

# first, verify that the script was invoked without any command-line arguments 
if [ $# -ne 0 ] ;
then 
    printUsageAndExit 1
fi

if [ "$DEBUG" ]
then
    set -x
fi

LOG=buildTcltk.log
CWD=`pwd`
#
exec > $LOG 2>&1

date

#
# print header
#
TITLE="Installing TCL/TK and related tools"
BUILD_NAME="Tcltk"
. ./standardPrologue
# The standardPrologue re-defines the echo function, whereby it disables
# the use of escape-sequences under Linux - I wonder why.

TCLTK_VERSION=8.6.8

TCLTK=${INSTALL_ROOT}/PRODUCTS/tcltk
cd ${INSTALL_ROOT}/PRODUCTS/

#
# Check if a proper version of Tcl is available in the O.S.
#
HAVE_TCL=$(which tclsh 2> /dev/null)
if [ -n "$HAVE_TCL" ]; then
    TCL_OS=$(echo "puts [info patchlevel]; exit" | tclsh 2> /dev/null)
    TCL_MIN=$(echo "$TCLTK_VERSION $TCL_OS" |xargs -n1 |sort -V |head -n1)
    if [ "$TCL_MIN" == "$TCLTK_VERSION" ] && ! echo "$HAVE_TCL" |grep -q "$ALMASW_INSTDIR/tcltk"; then
        echo "Skipping Tcl build because Tcl $TCL_OS is available in the operating system."
        SKIP_TCL=1
    fi
fi

#
# Check if a proper version of Tk is available in the O.S.
#
HAVE_TK=$(which wish 2> /dev/null)
if [ -n "$HAVE_TK" ]; then
    TK_OS=$(echo "puts [package require Tk]; exit" | tclsh 2> /dev/null)
    TK_MIN=$(echo "$TCLTK_VERSION $TK_OS" |xargs -n1 |sort -V |head -n1)
    if [ "$TK_MIN" == "$TCLTK_VERSION" ] && ! echo "$HAVE_TK" |grep -q "$ALMASW_INSTDIR/tcltk"; then
        echo "Skipping Tk build because Tk $TK_OS is available in the operating system."
        SKIP_TK=1
    fi
fi

if [[ -z "$SKIP_TCL" || -z "$SKIP_TK" ]]; then
    #Both need to be provided or we compile them
    unset SKIP_TCL SKIP_TK
else
    export SKIP_TCL SKIP_TK
fi

#Should we skip the package
function should_skip_package () {
    PKG_VER=$(echo "puts [package require $1]; exit" | tclsh 2> /dev/null)
    PKG_EXP=$2
    PKG_MIN=$(echo "$PKG_EXP $PKG_VER" |xargs -n1 |sort -V |head -n1)
    PKG_CMD=$(echo "puts [package require $1; package ifneeded $1 $PKG_VER]; exit" | tclsh 2> /dev/null)
    echo "PKG: $1 -- EXP: $2 -- VER: $PKG_VER -- CMD: $PKG_CMD"
    if [[ -n "$PKG_VER" && "$PKG_MIN" == "$PKG_EXP" ]] && ! echo "$PKG_CMD" |grep -q "$ALMASW_INSTDIR/tcltk"; then
        echo 1
    fi
}

#Should we skip the binary
function should_skip_binary () {
    HAVE_PKG=$(which $1 2> /dev/null)
    if [ -n "$HAVE_PKG" ] && ! echo "$HAVE_PKG" |grep -q "$ALMASW_INSTDIR/tcltk"; then
        PKG_VER=$($1 -version |awk '{print $2}' |tr -d 'v')
        PKG_EXP=$2
        PKG_MIN=$(echo "$PKG_EXP $PKG_VER" |xargs -n1 |sort -V |head -n1)
        if [[ -z "$PKG_VER" || "$PKG_MIN" == "$PKG_EXP" ]]; then
            echo 1
        fi
    fi
}

#We're currently not skipping packages
if [[ -n "$SKIP_TCL" && -n "$SKIP_TK" && false ]]; then
    SKIP_ITCL=$(should_skip_package Itcl 3.4)
    SKIP_ITK=$(should_skip_package Itk 3.4)
    SKIP_IWIDGETS=$(should_skip_package Iwidgets 4.0.2)
    SKIP_TCLX=$(should_skip_package Tclx 8.4)
    SKIP_TCLLIB=$(should_skip_package dicttool 1.0)
    SKIP_TKLIB=$(should_skip_package xyplot 1.0.1)
    SKIP_BLT=$(should_skip_package BLT 2.5)
    SKIP_TKIMG=$(should_skip_package img::window 1.4.6)
    SKIP_TKTABLE=$(should_skip_package Tktable 2.11)
    SKIP_SNACK=$(should_skip_package snack 2.2)
    SKIP_TKMAN=$(should_skip_binary tkman 2.2)
    SKIP_RMAN=$(should_skip_binary rman 3.1)
    SKIP_EXPECT=$(should_skip_package Expect 5.45.3)
    SKIP_MSQLTCL=$(should_skip_package msqltcl 1.99)
fi

if [ -d tcltk ]
then
    echo "$TCLTK already existing; I'll first remove it"
    rm -rf $TCLTK
fi

TCL_CONTAINER=tcltk-$TCLTK_VERSION.tar.gz
echo ""
echo "Tcl/Tk container tar-file: ----> ${TCL_CONTAINER} <----"
echo ""
echo -n "untarring ${TCL_CONTAINER} . . . "
tar -xzf ${TCL_CONTAINER}
echo "done."

cd $CWD

#
# get current operating system
#
build_OS=`uname -s`
build_OSV=`uname -r`

if [ ${build_OS} = "Linux" ]
then
     distro=`cat /etc/redhat-release | awk '{ print $1 $2 }'`
     if [ "X${distro}" = "XCentOSrelease" -o "X${distro}" = "XCentOSLinux" ] ; then
         distro="CentOS"
     fi
     if [ "X${distro}" = "XRedHat" ] ; then
          build_OSV=${distro}`awk '{ print $3 $7 }' /etc/redhat-release`
     elif [ "X${distro}" = "XCentOS" -o "X${distro}" = "XScientificLinux" ] ; then
          build_OSV=${distro}`awk '{ print $(NF-1) }' /etc/redhat-release`
     elif [ "X${distro}" = "XFedoraCore" ] ; then
          build_OSV=${distro}`awk '{ print $4 }' /etc/redhat-release`
     fi   
elif [ ${build_OS} = ${CYGWIN_VER} ]; then
    build_OSV=`echo ${build_OSV} | awk ' { split($0, v, "("); print v[1] } '`
fi

echo $SEPARATOR
echo 
echo "Installing on $build_OS version $build_OSV"
echo 

if [     ${build_OS}-${build_OSV} != "Linux-RedHatEnterprise5.5"  \
     -a  ${build_OS}-${build_OSV} != "Linux-ScientificLinux6.2"  \
     -a  ${build_OS}-${build_OSV} != "Linux-RedHatEnterprise6.9"  \
     -a  ${build_OS}-${build_OSV} != "Linux-CentOS6.9"  \
     -a  ${build_OS}-${build_OSV} != "Linux-RedHatEnterprise7.3"  \
     -a  ${build_OS}-${build_OSV} != "Linux-RedHatEnterprise7.4"  \
     -a  ${build_OS}-${build_OSV} != "Linux-CentOS7.4.1708"  \
   ]
then
    echo ""
    echo "        WARNING: this procedure has not been tested on this system!"
    echo ""
fi

echo "--- Check current environment and prepare installation"
#-------------------
# check that ACSDATA is defined as directory (needed by msql)
#
if [ "$MSQL" ]
then
    echo "check ACSDATA . . ."
    if [ "X$ACSDATA" = "X" ]
	then	
	echo "$ACSDATA not defined, cannot continue."
	exit 1
    fi
    
    DIR_LIST="
         ENVIRONMENTS      \
         config            \
         tmp               \
         msql              \
         msql/.tmp         \
         msql/msqldb       \
         msql/msqldb/.tmp  \
        "

    if [ ! -d $ACSDATA ]
	then
	if mkdir $ACSDATA
	    then
	    echo "   CREATED >>> |---$ACSDATA "
	else
	    echo ""
	    echo "ERROR: cannot create the starting directory >>$ACSDATA<<"
	    echo "          Please fix the problem and try again."
	    echo ""
	    exit 1
	fi
    else
	echo "               |---$ACSDATA "
    fi
    #
    # if not already there, create all the needed subdirectories
    for dir in $DIR_LIST
      do
      if [ ! -d $ACSDATA/$dir ]
	  then
	  mkdir $ACSDATA/$dir
	  chmod g+w $ACSDATA/$dir
	  echo "   CREATED >>>     |---$dir "
      else
	  echo "                   |---$dir "
      fi
    done
    chmod -R g+w $ACSDATA
    echo " . . . ok"
fi

#-------------------
# check that all needed files are there
#
# The Tcl/Tk tarball must be named same as top-level container file
TCL_TARBALL=$TCL_CONTAINER
FILE_LIST="tclCheck-1.1.13.tar.gz ${TCL_TARBALL} tkcon-2.*.tar.gz "
if [ "$MSQL" ]
    then 
    FILE_LIST="$FILE_LIST msql2.tar.gz "
fi

for file in $FILE_LIST
do
    if [ ! -f ${TCLTK}/$file ]
    then
    	echo "$file missing - should be contained in ${INSTALL_ROOT}/PRODUCTS/${TCL_CONTAINER}"
	exit 1
    fi
done

#
# setup and check target directory
#
if [ -z "$TCLTK_ROOT" ]
then
    TCLTK_ROOT=/usr/local
fi

if [ ! -d $TCLTK_ROOT ]
then
     mkdir -p $TCLTK_ROOT
     RET=$?
     if [ $RET -ne 0 ]
     then
        echo "Failed to create $TCLTK_ROOT, cannot continue..."
        exit 1  
     fi
fi

PREFIX=$TCLTK_ROOT
export PREFIX
echo -n "target directory set to: $PREFIX . . . "

if [ ! -d $PREFIX ]
then
    echo "but that is not a directory, cannot continue."
    exit 1
fi

if [ ! -w $PREFIX ]
then
    echo "but that is not a writable directory, cannot continue."
    exit 1
fi
echo " . . . ok"


#
# create a temporary directory used to expand the tar files and 
# to compile
#
export SRC="$TCLTK/$build_OS-$build_OSV"

echo -n "set temporary build directory: $SRC . . . "
if [ -d $SRC ]
then
    echo -n "removing current content . . . "
    rm -rf $SRC
fi
mkdir $SRC
echo "done"

#
# Configure env variables
#
export LDFLAGS="$LDFLAGS -Wl,--add-needed"


#
# get current content of the target directory
#
bFile=$SRC/before_buildTcltk
aFile=$SRC/after_buildTcltk
rm -f $bfile $aFile
cd $PREFIX
find . -print > $bFile
cd $CWD

#
# when target dir is not /usr/local, delete the current content
#
if [ "X$PREFIX" != "X/usr/local" ]
then	
    echo -n "remove ${PREFIX} . . . "
    rm -rf $PREFIX
    mkdir -p $PREFIX/bin $PREFIX/lib $PREFIX/include $PREFIX/man/man1 $PREFIX/man/man3 $PREFIX/man/mann $PREFIX/doc
    echo " . . . done"
fi

if [[ -n "$SKIP_TCL" || -n "$SKIP_TK" ]]; then
    TCLSCRIPTSDIR=$(echo "puts [::tcl::pkgconfig get scriptdir,install]; exit" |tclsh)
    ln -s $TCLSCRIPTSDIR  $TCLTK_ROOT/lib/
fi

###############################################################
# 1. msql
#
if [ "$MSQL" ]
then
    echo $SEPARATOR
    echo "msql: untarring . . . "
    cd $SRC
    tar -xzf $TCLTK/msql2.tar.gz
    cd msql-2.0.11/targets/$build_OS
    ./setup
    make install
    cp ../../msql.acl $TCLTK_ROOT/include
    cd $TCLTK_ROOT
    rm -fr README README.sco makegen misc www msql.acl.sample
    cd bin
    rm -f msqld msqlrelshow
    ln -s msql2d msqld
    ln -s relshow msqlrelshow
fi

#*********************************************
#
#  2. The Tcl/Tk core plus common extensions:
#    - tcl/tk
#    - tcllib
#    - tklib
#    - [incr Tcl] 
#    - iwidgets
#    - tclX
#    - BLT
#    - tkimg
#    - Tktable
#    - snack
#    - tkman
#    - rman
#    - expect
#    - msqltcl (if -m option specified)
#  These components and their versions will be printed to stdout.
#  The actual build is done by the buildTclTk script contained
#  within the tcltk-MMMYYYY.tar.gz tarball.
#
echo $SEPARATOR
cd $SRC
echo -n "tcltk: untarring ${TCLTK}/${TCL_TARBALL} . . . "
tar -xzf ${TCLTK}/${TCL_TARBALL}
echo "done."

# There used to be here the instructions to apply patches for CYGWIN, 
# but they were version-dependent, and should therefore not be put here 
# but rather within the buildTclTk script contained in tcltk-MMMYYYY.tar.gz
###if [ "${build_OS}" = "$CYGWIN_VER" ]; then
###    patch $SRC/tcl8.4.19/generic/tclEnv.c < ${INSTALL_ROOT}/PRODUCTS/tcl.putenv.patch
###fi

# The tar-ball must contain a build-script that in its name
# includes exactly the same release-string as the tarball itself.
RELEASE=`echo ${TCL_TARBALL} | awk -Ftcltk- '{ print $2 }' | awk -F.tar.gz '{ print $1 }'`
if [ ! -f buildTclTk-${RELEASE} ]
then 
    echo "buildTclTk-${RELEASE} script missing in ${TCLTK}/${TCL_TARBALL} - exiting"
    exit 1
fi

if [ "$MSQL" ]
then
    ./buildTclTk-${RELEASE} -m
else
    ./buildTclTk-${RELEASE}
fi 

###########################################
# 3. tclCheck
# 
# no man page, only $PREFIX/bin/tclCheck has been installed
#
echo $SEPARATOR
echo "tclCheck: untarring . . . "
cd $SRC
tar -xzf $TCLTK/tclCheck-1.1.13.tar.gz
cd tclCheck-1.1.13

# 1. to avoid problem with 'getopt': comment the line 
#    extern int getopt(int, char**, char*);
# 2. replace  'install -s' by 'cp' in Makefile

cp tclCheck.c tclCheck.orig.c
rm -rf tclCheck.c
cat tclCheck.orig.c | grep -v 'int getopt' > tclCheck.c

make

cp Makefile Makefile.orig
rm -rf Makefile
cat Makefile.orig | sed s'/install -s/cp/' > Makefile
make install BIN=$PREFIX/bin

###########################################
# 4. tkcon
# 
#
echo $SEPARATOR
echo "tkcon: untarring . . . "
cd $SRC
tar -xzf $TCLTK/tkcon-2.*.tar.gz
cd tkcon-2.*
cp tkcon.tcl $PREFIX/bin/tkcon
chmod 755 $PREFIX/bin/tkcon
cp -R docs $PREFIX/doc/
mv $PREFIX/doc/docs $PREFIX/doc/tkcon

###############################################################
# 5. msql / msqltcl configuration
#
#    needed to implement the VCC/ACC database. 
#    The msql static library is linked by seqSh/seqWish (as there is no
#    shared lib available for dynamic loading)
#    The ad hoc installation procedure created the database in ACSDATA and the
#    binaries in the target directory
#
if [ "$MSQL" ]
then
    # Fix to the msql.conf file to put the real path to the TCLTK_ROOT 
    # and the ACSDATA directories (the msql deamon itself does not 
    # understand environment variables)
    cd $TCLTK_ROOT
    sed -e 's,Inst_Dir = [^\n]*,'"Inst_Dir = $TCLTK_ROOT,g" \
	-e 's,DB_Dir = [^\n]*,'"DB_Dir = $ACSDATA/msql/msqldb,g" \
	-e 's,mSQL_User = [^\n]*,'"mSQL_User = almamgr,g" \
	-e 's,Admin_User = [^\n]*,'"Admin_User = almamgr,g" \
	msql.conf > msql.conf.acs
    mv msql.conf.acs msql.conf
fi


###############################################################
# 6. symbolic link for seqSh
#
#    tat executes shell scripts through seqSh. a link from tcl to seqSh
#    solves this issue

if [ ! -L $TCLTK_ROOT/bin/seqSh ]; then
	ln -s $TCLTK_ROOT/bin/tcl $TCLTK_ROOT/bin/seqSh
fi

if [ ! -L $TCLTK_ROOT/bin/seqWhish ]; then
	ln -s $TCLTK_ROOT/bin/wish $TCLTK_ROOT/bin/seqWish
fi

###############################################################
# 7. VERIFICATION
#
echo $SEPARATOR
echo ""
echo "                          VERIFICATION"
echo ""

cd ${INSTALL_ROOT}/INSTALL
if [ "$MSQL" ]
then
    ./checkTcltk --msql
else 
    ./checkTcltk
fi

###############################################################
# 7. Epilogue
#

. $CWD/standardEpilogue
