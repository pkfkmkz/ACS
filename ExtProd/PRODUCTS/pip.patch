--- pip.orig/_internal/commands/install.py	2022-02-01 01:23:06.284472474 +0000
+++ pip/_internal/commands/install.py	2022-02-01 01:34:27.356023037 +0000
@@ -98,6 +98,13 @@
                 "with new versions."
             ),
         )
+        self.cmd_opts.add_option(
+            '--target-scripts',
+            dest='target_scripts_dir',
+            metavar='dir',
+            default=None,
+            help='Install packages\' scripts into <dir>. It requires the -t or --target flag to be used.'
+        )
         cmdoptions.add_target_python_options(self.cmd_opts)
 
         self.cmd_opts.add_option(
@@ -242,6 +249,9 @@
         if options.use_user_site and options.target_dir is not None:
             raise CommandError("Can not combine '--user' and '--target'")
 
+        if options.target_scripts_dir is not None and options.target_dir is None:
+            raise CommandError("Can not use '--target-scripts' without '--target'")
+
         cmdoptions.check_install_build_global(options)
         upgrade_strategy = "to-satisfy-only"
         if options.upgrade:
@@ -280,6 +290,15 @@
             target_temp_dir_path = target_temp_dir.path
             self.enter_context(target_temp_dir)
 
+            if options.target_scripts_dir is not None:
+                options.target_scripts_dir = os.path.abspath(options.target_scripts_dir)
+                if (os.path.exists(options.target_scripts_dir) and not
+                        os.path.isdir(options.target_scripts_dir)):
+                    raise CommandError(
+                        "Target's scripts path exists but is not a directory, will not "
+                        "continue."
+                    )
+
         global_options = options.global_options or []
 
         session = self.get_default_session(options)
@@ -462,14 +481,14 @@
         if options.target_dir:
             assert target_temp_dir
             self._handle_target_dir(
-                options.target_dir, target_temp_dir, options.upgrade
+                options.target_dir, target_temp_dir, options.target_scripts_dir, options.upgrade
             )
 
         warn_if_run_as_root()
         return SUCCESS
 
     def _handle_target_dir(
-        self, target_dir: str, target_temp_dir: TempDirectory, upgrade: bool
+        self, target_dir: str, target_temp_dir: TempDirectory, target_scripts_dir: str, upgrade: bool
     ) -> None:
         ensure_dir(target_dir)
 
@@ -482,12 +501,19 @@
         scheme = get_scheme("", home=target_temp_dir.path)
         purelib_dir = scheme.purelib
         platlib_dir = scheme.platlib
+        scripts_dir = scheme.scripts
         data_dir = scheme.data
 
+        if target_scripts_dir is None:
+            target_scripts_dir = os.path.join(target_dir, os.path.relpath(scripts_dir, target_temp_dir.path))
+        ensure_dir(target_scripts_dir)
+
         if os.path.exists(purelib_dir):
             lib_dir_list.append(purelib_dir)
         if os.path.exists(platlib_dir) and platlib_dir != purelib_dir:
             lib_dir_list.append(platlib_dir)
+        if os.path.exists(scripts_dir):
+            lib_dir_list.append(scripts_dir)
         if os.path.exists(data_dir):
             lib_dir_list.append(data_dir)
 
@@ -497,7 +523,10 @@
                     ddir = os.path.join(data_dir, item)
                     if any(s.startswith(ddir) for s in lib_dir_list[:-1]):
                         continue
-                target_item_dir = os.path.join(target_dir, item)
+                if lib_dir == scripts_dir:
+                    target_item_dir = os.path.join(target_scripts_dir, item)
+                else:
+                    target_item_dir = os.path.join(target_dir, item)
                 if os.path.exists(target_item_dir):
                     if not upgrade:
                         logger.warning(
@@ -515,12 +544,13 @@
                             target_item_dir,
                         )
                         continue
-                    if os.path.isdir(target_item_dir):
-                        shutil.rmtree(target_item_dir)
-                    else:
+                    if not os.path.isdir(target_item_dir):
                         os.remove(target_item_dir)
 
-                shutil.move(os.path.join(lib_dir, item), target_item_dir)
+                if os.path.isdir(target_item_dir):
+                    shutil.copytree(os.path.join(lib_dir, item), target_item_dir, dirs_exist_ok=True)
+                else:
+                    shutil.move(os.path.join(lib_dir, item), target_item_dir)
 
     def _determine_conflicts(
         self, to_install: List[InstallRequirement]
